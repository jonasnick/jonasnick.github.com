<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bitcoin | nickler's]]></title>
  <link href="http://jonasnick.github.io/blog/categories/bitcoin/atom.xml" rel="self"/>
  <link href="http://jonasnick.github.io/"/>
  <updated>2015-07-09T14:59:19+02:00</updated>
  <id>http://jonasnick.github.io/</id>
  <author>
    <name><![CDATA[Jonas Nick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Can miners exploit a block size increase?]]></title>
    <link href="http://jonasnick.github.io/blog/2015/06/23/can-miners-exploit-a-block-size-increase/"/>
    <updated>2015-06-23T10:49:00+02:00</updated>
    <id>http://jonasnick.github.io/blog/2015/06/23/can-miners-exploit-a-block-size-increase</id>
    <content type="html"><![CDATA[<p>We don&rsquo;t know yet. But modelling is in my opinion a useful tool to investigate potential effects.
Therefore, I used Gavin Andresen&rsquo;s mining simulator to create some more or less plausible scenarios.
You can find the <a href="https://github.com/jonasnick/bitcoin_miningsim/blob/master/analysis/README.md">resulting plots on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fuzzing Bitcoin Consensus]]></title>
    <link href="http://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus/"/>
    <updated>2015-05-09T23:39:00+02:00</updated>
    <id>http://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus</id>
    <content type="html"><![CDATA[<p><strong>TLDR</strong> I ran <a href="http://lcamtuf.coredump.cx/afl/">afl-fuzz</a> against <a href="https://github.com/bitcoin/bitcoin/blob/15facb4aca75122b6ae0dcc6f6e112127e6a0e59/doc/release-notes/release-notes-0.10.0.md#consensus-library">libbitcoinconsensus</a> to discover interesting Bitcoin scripts and used them to search for Bitcoin reimplementations vulnerable to forking. This discovered <a href="https://github.com/btcsuite/btcd/commit/f284b9b3947eb33b91e31deec74936855feed61f">two bugs</a> in <a href="https://github.com/btcsuite/btcd">btcd</a> by Conformal.
See the <a href="https://github.com/jonasnick/bitcoinconsensus_testcases">bitcoinconsensus_testcases repository</a> for the discovered Bitcoin scripts.</p>

<!-- more -->


<h2>Forks</h2>

<p>One of the things that must not happen during regular Bitcoin operation are <em>forks</em>.
A fork occurs when there is a new block $B_{i+1}$ which is a valid successor to block $B_i$ for some set of Bitcoin nodes $N_v$ and invalid for the remaining nodes $N_{\neg v}$.
Therefore, miners in $N_v$ will mine new blocks on top of $B_{i+1}$ and miners in $N_{\neg v}$ will still mine on $B_i$.
As long as the majority of hashpower is in $N_{\neg v}$, the chain divergence will be resolved after some time, because $N_{\neg v}$&rsquo;s chain will eventually get longer than $N_v$&rsquo;s chain
and then the nodes in $N_v$ will switch to $N_{\neg v}$&rsquo;s chain.
This is due to the nature of the <a href="https://en.bitcoin.it/wiki/Block_chain">blockchain</a>: nodes always trust the longest valid chain (more exact: the chain with the most proof of work).</p>

<p>Consider for example the case of an update to the Bitcoin reference implementation that <a href="https://github.com/bitcoin/bips/blob/ced361de1d47c71e967430e17339be520b71bb1a/bip-0062.mediawiki#block-validity">restricts valid signature encodings</a>. $N_v$ are the nodes running the old Bitcoin version and $N_{\neg v}$ run the new version.
As soon as the hash power of $N_{\neg v}$ exceeds some threshold the new consensus rule can be safely activated.
In the context of Bitcoin updates this is called a <a href="https://en.bitcoin.it/wiki/Softfork">softfork</a>: a valid block becomes invalid in the new version.
On the other hand, a <a href="https://en.bitcoin.it/wiki/Hardfork">hardfork</a> occurs when an invalid block is valid in a new version, for example by <a href="http://gavinandresen.ninja/time-to-roll-out-bigger-blocks">raising the maximum block size limit</a>.
Then nodes that run the old version are represented by $N_{\neg v}$. Even if the majority of hashpower is in $N_v$, the nodes in $N_{\neg v}$ can never switch
to $N_v$&rsquo;s chain because some blocks are invalid for them.
Therefore, in the case of a hardfork all nodes are required to update.</p>

<h2>Fuzzing</h2>

<p>Forks in practice do not only happen deliberately because of updating mechanisms but can also be triggered by <a href="https://github.com/bitcoin/bips/blob/master/bip-0050.mediawiki">bugs</a>.
Bitcoin reimplementations such as libbitcoin, btcd, bitcore and toshi are particularly vulnerable to these bugs because they have to match exactly the behavior of the Bitcoin reference implementation.
In order to abstract part of the consensus critical code and allow other projects to use it, Bitcoin Core developers created the <a href="https://github.com/bitcoin/bitcoin/blob/15facb4aca75122b6ae0dcc6f6e112127e6a0e59/doc/release-notes/release-notes-0.10.0.md#consensus-library">bitcoinconsensus library</a>.
I am not aware of any reimplementation that already adopted libbitcoinconsensus.
Right now, it only has a single function bitcoinconsensus_script_verify, which takes an output <a href="https://en.bitcoin.it/wiki/Script">script</a> and a transaction and returns if the transaction is allowed to spend the output.</p>

<p>Among other conditions, a transaction is valid if the top stack item is different from 0 after script execution.
Bitcoin script is much more powerful than just verifying signatures and therefore I was curious to find interesting scripts, i.e. scripts that trigger unusual edge cases.
I&rsquo;ve recently heard about successes with <a href="http://lcamtuf.coredump.cx/afl/">afl-fuzz</a> whose heuristic using code coverage seemed to be particularly well suited for the task.
Also, it has the capability to minimize a set of inputs such that the code coverage stays the same.
After fuzzing libbitcoinconsensus for two weeks I supplied the inputs to btcd&rsquo;s <a href="https://github.com/btcsuite/btcd/tree/master/txscript">txscript</a>, a reimplementation in golang, and checked if the outputs differ.</p>

<h2>Btcd bugs</h2>

<p>The first bug I found was in btcd&rsquo;s implementation of the OP_IFDUP opcode. This opcode pushes the top stack element on the stack if it differs from 0.
Because of a type conversion in btcd, a stack element that exceeds 4 bytes would have never been copied, which differs from bitcoinconsensus' implementation of the opcode.
The second bug concerned the representation of the result of OP_EQUAL.
This opcode compares the two top stack elements and pushes the result on the stack.
In Bitcoin Core, if the comparison fails an empty byte array is pushed on the stack.
Btcd however pushed a byte array containing 0.
This means that the following script would be valid in bitcoinconsensus and invalid in btcd (Note that OP_0 pushes an empty byte array to the stack):
<code>
OP_0 OP_0 OP_TRUE OP_EQUAL OP_EQUAL
</code></p>

<p>Both bugs would have triggered hardforks. An attacker could simply broadcast a transaction with the affected scripts and it would be mined subsequently.
Btcd would have not been able to include the block into its chain and would become stuck on the last block.
Therefore, an attacker could create a block on top of btcd&rsquo;s chain paying a merchant running btcd without affecting his &lsquo;real&rsquo; coins on the main chain.
Note that the attacker would not race against the hashpower of Bitcoin miners.</p>

<p>Dave Collins from the btcd team fixed these issues very fast and additionally improved the test coverage in Bitcoin Core for the <a href="https://github.com/bitcoin/bitcoin/pull/6112">affected</a> and <a href="https://github.com/bitcoin/bitcoin/pull/6075">more</a> opcodes.
Additionally, he was so kind to award me with 0.5 bitcoin for the find.</p>

<h2>Conclusion</h2>

<p>You can find the result of the fuzzing, the code to produce them and test reimplementation in the <a href="https://github.com/jonasnick/bitcoinconsensus_testcases">bitcoinconsensus_testcases repository</a>.
If you are interested you can start fuzzing yourself and submit a pull request with new scripts you found.
Also, I&rsquo;ve executed the testcases only with btcd and bitcore so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Seeder DoS vulnerability]]></title>
    <link href="http://jonasnick.github.io/blog/2015/03/17/bitcoin-seeder-dos-vulnerability/"/>
    <updated>2015-03-17T22:23:00+01:00</updated>
    <id>http://jonasnick.github.io/blog/2015/03/17/bitcoin-seeder-dos-vulnerability</id>
    <content type="html"><![CDATA[<p>The DNS parser of the <a href="https://github.com/sipa/bitcoin-seeder">Bitcoin Seeder</a> was vulnerable to a denial of service attack. A specially crafted DNS request could trigger infinite recursive function calls that lead to a stack overflow. See the <a href="https://gist.github.com/jonasnick/62558e4b8ab43bc847c2">exploit</a>.
The vulnerability was fixed in commit <a href="https://github.com/sipa/bitcoin-seeder/commit/11e935b72020607e5c3ce85a88209bc34e427a06">11e935b</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guessing bitcoin's P2P connections]]></title>
    <link href="http://jonasnick.github.io/blog/2015/03/06/guessing-bitcoins-p2p-connections/"/>
    <updated>2015-03-06T14:22:00+01:00</updated>
    <id>http://jonasnick.github.io/blog/2015/03/06/guessing-bitcoins-p2p-connections</id>
    <content type="html"><![CDATA[<p>The paper <a href="http://arxiv.org/abs/1405.7418">Deanonymisation of clients in Bitcoin P2P network (2014)</a> by Biryukov, Khovratovich and Pustogarov (BKP), who describe an attack on Bitcoin Core clients, has started some discussion lately.
The main idea of the paper is to first get a set of nodes $E_v$ to which your victim $v$ is directly connected to (&ldquo;entry nodes&rdquo;).
Second, for each transaction $t$ record the $10$ nodes $P_t$ which first propagate $t$.
The authors experimentally show that if $|E_v \cap P_t|$ is bigger than $3$ then there is a pretty high chance that $t$ actually originated from $v$.
However, both attack stages basically require a Sybil attack &ndash; the attacker has to be connected to a lot of nodes a lot of times.
&lsquo;A lot&rsquo; means that in their experiments they had 50 connection to each full node (~250) in the test network.
As a result, such an attack seems to be powerful, but certainly won&rsquo;t be undetected.</p>

<p>In this post I show that the first stage of the attack, namely learning the nodes a victim is directly connected to can
be done with a single connection to the victim.
In addition to BKP&rsquo;s attack, knowing all outbound peers of a client could significantly increase the success probability of a double spend.
Note that all experiments are based on Bitcoin Core 0.9.4, but 0.10.0 shows the same behavior.</p>

<p><strong>TLDR</strong> The attacker can reliably guess all of the outbound connections of a victim by making a selection from the known addresses of a victim based on the timestamp of the addresses.</p>

<p><strong>Update</strong> A <a href="https://github.com/bitcoin/bitcoin/pull/5860">fix has been merged</a> to bitcoind. The timestamp is not updated anymore when receiving a message from a connected peer. Instead, it is only updated when the peer disconnects. The fix is released in bitcoin core 0.10.1.</p>

<!-- more -->


<h2>Learning connections using addr propagation</h2>

<p>When a node $n$ connects to another peer $p$ in the network it advertises its address using the &ldquo;addr&rdquo; message.
The peer will select a number of its own peers at random which are &ldquo;responsible&rdquo; for $n$&rsquo;s address.
Then the address is forwarded to responsible peers to spread the knowledge about $n$ in the network.
The number of responsible peers is either $1$ or $2$ depending on whether the address is reachable by $p$.</p>

<p>BKP&rsquo;s attack works by recording the set of peers that first propagated a victim&rsquo;s address.
In order to have good chance to be in the set of responsible peers for the address, the attacker has to hold
a significant number of connections to each full node in the network.
Note that it is possible to have multiple connections from a single public address to a peer.</p>

<h2>The getaddr message</h2>

<p>It turns out that an attacker can simply infer the peers of a victim by sending getaddr messages to him.</p>

<p>In bitcoin, the address structures that are send via the addr message do not only contain the IP adress and port
but also a timestamp.
The timestamp&rsquo;s role is ensuring that terminated nodes vanish from the networks knowledge and it is regular refreshed by
the nodes which have an interaction (more about that later) with the peer at that address.
Bitcoin nodes usually record the addresses they hear about and send them in a reply to a getaddr using the addr message.</p>

<p>The following experiments show that an attacker can guess some or all of the direct peers of a victim
by sorting the known addresses of the victim based on the timestamp.</p>

<p>A minor obstacle is that a node replies to a single getaddr message only with maximal 2500 addrs selected uniformly at random.
In order to get a certain percentage $\tau$ of the known addresses of a node the attacker has to send multiple
getaddr messages and record the percentage that is new to her.</p>

<p>```
S = {}
while(true):</p>

<pre><code>send_getaddr()
T = response()
tau' = 1 - ((|T - S|) / |T|) 
S &lt;- S $\cup$ T
if \tau' &gt; \tau
    break
</code></pre>

<p>return S
```</p>

<p>Experiments show that if we wait 10 seconds after each getaddr request it takes around $3.5$ minutes to collect $\tau$ percent addresses ($13,500$ in this case).</p>

<h2>Experimental results</h2>

<p>I set up a victim node $v$, which is just a regular bitcoin node.
The attacker $a$ is a node that connects to $v$ via the P2P network and queries the known nodes of $v$.
Second, $a$ connects to $v$ via the RPC interface and gets the true peers.</p>

<p>The attacker code (btcP2PStruct) is <a href="https://github.com/jonasnick/btcP2PStruct">available on github</a>.
Thanks to the <a href="https://github.com/conformal/btcwire">btcwire</a> package it is very simple to write this kind of code.</p>

<p>You can find all the data to produce the graphs in the <a href="https://github.com/jonasnick/btcP2PStruct/data">project repository</a>.</p>

<p>First we consider the case where $v$ does not accept incoming connections (&ldquo;client&rdquo; in BKP&rsquo;s terms).
$v$ was running for 2 days and I recorded data for every hour but I will only discuss the last measurement
because the data is very similar.</p>

<div class="text-image-big">
<img src="http://jonasnick.github.io/images/guessing_btc_peers/client-histogram.png">
</div>


<p>Note that $v$ returned $12,868$ known addresses.
Also, a client usually has maximally 8 peers due to the default maximum number of outbound connections.
This implies that an attacker can not start start this attack on a client that is not connected to her.
Here we see that if the attacker obtains all peers of $v$ (without any false positives in this case).</p>

<p>Next, the case for the full node, which I left running for 8 days.</p>

<div class="text-image-big">
<img src="http://jonasnick.github.io/images/guessing_btc_peers/full_node-histogram.png">
</div>


<p>Again it is evident that an attacker can reliably determine all outbound connections of the victim using a threshold of 20 minutes.
However, inbound peers can only be detected very poorly.</p>

<p>The reason for finding all outbound peers is is <a href="https://github.com/bitcoin/bitcoin/blob/249bf0e0492758d71dc5d8fa77103b31b604979f/src/main.cpp#L4192">this logic in bitcoin-core</a> which refreshes the timestamp on every message of outbound nodes.</p>

<h2>Reducing false positives</h2>

<p>BKP mention a neat trick how to determine if two nodes $v_1$ and $v_2$ are connected.
First, the attacker connect to $v_1$ and $v_2$ and send addr messages containing bogus addresses to $v_1$.
Then, she counts the number of times one of these addresses is received from $v_2$.
However, the authors leave open how many messages you need send to be certain about the hypothesis.</p>

<p>As we already know, the address is forwarded only to two responsible nodes so we have to compute the
probabilities of our node being responsible.
Using the binomial distribution we can compute the likelihood of receiving a certain number of addresses back
given that we sent a certain number of addresses.</p>

<p>I&rsquo;ve done the math using <a href="https://github.com/jonasnick/btcP2PStruct/blob/master/prob/is_connected_prob.py">this code</a> and some assumptions regarding the structure (edges are uniformly iid).
Also, the attacker has to know or approximate the number of peers of a node, which can be done
with a similar method than the one described.
Connect two times to the victim, send and note the ratio of returned addr messages.
If you can not connect to the node, it will most likely have 8 peers.</p>

<p>This <em>theoretical</em> model shows that that if $v_1$ is a full node and $v_2$ is a client then we need about 2000 messages to determine if they are connected with 95% probability.
Similarly, if $v_1$ and $v_2$ are full nodes, the attacker needs to send 20000 messages.</p>

<p>However, in order to remain polite in the network this attack needs start from a candidate set of nodes.
Therefore, it could be a useful method to remove the false positives which were obtained with the &ldquo;getaddr&rdquo;-fingerprint.</p>

<h2>Conclusion</h2>

<p>It should be pointed out that even if you know a victim&rsquo;s entry nodes you can not simply connect to those few and listen for transactions.
This is because <a href="https://en.bitcoin.it/wiki/Satoshi_Client_Transaction_Exchange">&ldquo;trickling&rdquo;</a> prevents estimating the origin of a transaction without further assumptions or doing BKP&rsquo;s Sybil attack.
However, knowing all outbound peers of a client could significantly increase the success probability of a double spend.</p>

<p><strong>Update</strong> The fix removes the update every 20 minutes and updates on disconnect</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Privacy in BitcoinJ]]></title>
    <link href="http://jonasnick.github.io/blog/2015/02/12/privacy-in-bitcoinj/"/>
    <updated>2015-02-12T15:53:00+01:00</updated>
    <id>http://jonasnick.github.io/blog/2015/02/12/privacy-in-bitcoinj</id>
    <content type="html"><![CDATA[<p>As part of my <a href="https://github.com/jonasnick/FCW-Kernel">epic quest</a> to apply supervised machine learning to the blockchain in order to discover transaction patterns, I reviewed various wallet implementations in the hope of finding privacy leaks.</p>

<p><strong>tl;dr</strong> If you are using a wallet that is built upon BitcoinJ, such as Android Wallet, Multibit and Hive Wallet, you have almost zero <em>wire privacy</em>.
An attacker who manages to connect to your wallet is easily able to figure out all addresses you control.
This is not very likely to get fixed in the near future.</p>

<p><strong>Update:</strong> <a href="https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ">Mike Hearn&rsquo;s reply</a> addresses additional problems and improvements.</p>

<!-- more -->


<h2>Bloom Filters for SPV Nodes</h2>

<p>A <a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a> is a probabilistic data structure that is used to test whether an element is a member of a set.
Bitcoin SPV nodes that use <a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki">BIP 37</a> (we call them <em>thin clients</em> from now on) <code>put</code> all public keys they are interested in into the Bloom filter and send the filter to their peers. Upon receiving a new transaction, peers <code>query</code> the Bloom filter and only relay the transaction to the BIP 37 node if the query returned true.
Thus, thin clients normally only receive the transactions they are really interested in, i.e. mostly transactions that include one of the wallet&rsquo;s keys.</p>

<p>The advantage of using a Bloom filter instead of just broadcasting all your pubkeys is that a Bloom filter is faster and more space-efficient
at the cost of some <em>false positives</em>.
That means the thin client will receive transactions that include pubkeys which were not put into the filter.
Usually, the parameters of a Bloom filter are computed such that a certain target false positive rate (<code>fp</code>) is achieved.
We want the fp rate to be relatively small (say 0.05%) to reduce bandwidth usage.</p>

<h2>Bloom Filters and Privacy</h2>

<p>BIP 37 states:
<blockquote><p>Privacy: Because Bloom filters are probabilistic, with the false positive rate chosen by the client, nodes can trade off precision vs bandwidth usage. A node with access to lots of bandwidth may choose to have a high fp rate, meaning the remote peer cannot accurately know which transactions belong to the client and which don&rsquo;t.</p></blockquote></p>

<p>This has created a misunderstanding between what is ideally possible with Bloom filters and how the reality looks like.
I&rsquo;ll focus on BitcoinJ because it is the most widely used implementation of BIP 37, but similar vulnerabilities might exist in other implementations as well.
Unfortunately, in the current BitcoinJ implementation Bloom filters are just as bad for your privacy as broadcasting your pubkeys directly to your peers.</p>

<h2>A Simple Attack</h2>

<p>The main idea behind this vulnerability is that BitcoinJ puts both pubkey and pubkeyhash into the Bloom filter which substantially reduces the false positive rate.</p>

<p>If you create a completely fresh wallet, BitcoinJ holds 271 pubkeys and computes the parameters
of the Bloom filter such that the fp rate for (271*2)+100 elements is equal to 0.05%.
Because bitcoinj initially puts only 271*2 elements into the filter (pubkey and corresponding pubkeyhash) the effective false positive rate is <code>fp=0.000146</code>.</p>

<p>The vulnerability is that if a pubkey is truly in the filter then querying both pubkey and pubkeyhash must return true.
Because the pubkeyhash is just another almost uniformly random string, the probability of a false positive for the attacker is <code>fp' = fp^2 = 0.0000000213</code>.
I obtained around 56 million pubkeys from the blockchain (mid-January), which theoretically results in <code>56 million * fp' = 1.19</code> expected false positives when scanning the blockchain.</p>

<h2>Experimental results</h2>

<p>I ran 20 crawlers since the beginning of December and collected 70,000 distinct filters until now.
These crawlers just listen for a filterload message and try to be really polite by disconnecting after 2 minutes and not sending anything.
The probability that a randomly selected DNS seed returns at least one of the crawlers is 4.3%.</p>

<p>In fact, most of the Bloom filters from recent BitcoinJ versions show a experimental false positive rate around 0.000146.
The experimental fp rate is computed by querying the filter with millions of elements which are certainly not pubkeys.
Android Wallet 4.16, 4.17, 4.18 for example use the most recent BitcoinJ version (12.2) and make up 52% of the data.
However, there is also MultiBit 0.5.18 whose effective fp rate is smaller than 0.00000001.</p>

<p>We are currently starting to analyze all filters using the described &ldquo;attack&rdquo; and we expect that this will take several weeks.
What we&rsquo;ve already seen is that the theoretical <code>fp'</code> really holds, i.e. if you create a fresh wallet and scan the whole blockchain you most likely get one false positive pubkey.</p>

<h2>(Slightly) More Difficult Attacks</h2>

<p>You might think that the problem is easily fixed by trading off bandwidth for more privacy and increase the fp rate to <code>fp = sqrt(0.0005) = 0.0224</code>.
On the one hand this might seriously impact the bandwidth of mobile clients, and on the other, there is another another general class of vulnerabilities concerning Bloom filters:
If an attacker manages to obtain multiple, different filters from the same Wallet,
he can compute the intersection of pubkeys that match the filters and therefore removes the false positive noise similar to the &ldquo;simple attack&rdquo;.
Different filters mean that they have different total size of a different Nonce.
Sending different filters can happen in BitcoinJ due to multiple reasons, for example</p>

<ul>
<li><em>Restart</em>. BitcoinJ stores the filter&rsquo;s nonce in volatile memory.</li>
<li><em>Creation of new keys</em>. When the wallet creates many new keys the filter gets &lsquo;full&rsquo; and thus has to be recomputed.</li>
<li><em>Measured false positive rate is too high</em>. BitcoinJ measures the false positive rate of transactions it receives. When it becomes too high the filter is recomputed.</li>
</ul>


<h2>Conclusion</h2>

<p>I do think this is a critical privacy leak as it doesn&rsquo;t require a sophisticated attack and wallets have practically been broadcasting all their pubkeys for years.
Not only the addresses you see in your wallet, but also a lot of your future addresses have been exposed.
From now on you should assume that the kind of bulk data collection I did is happening.
It is difficult to say how accurate and stealthy targeted attacks would be.</p>

<p>According to Mike Hearn, the creator of BitcoinJ, the problems have been known from the start but fixing these issues is far from trivial because &ldquo;lying consistently is hard&rdquo;.
I fully agree with this.
<strong>Someone needs to make it their project for a few months</strong>.</p>

<p>There are some simple ideas to slightly improve the current status such as <a href="https://twitter.com/petertoddbtc/status/559921997027610624">deploying nodes that broadcast fake bloom filters</a>.
<a href="http://www.syssec.ethz.ch/content/dam/ethz/special-interest/infk/inst-infsec/system-security-group-dam/research/publications/pub2014/acsac_gervais.pdf">Arthur Gervais et al., 2014</a> were the first to publish an academic paper on the topic and propose some more or less vague suggestions.
One idea I find interesting is that thin clients should be able to install multiple filters at their peers such that no pubkey is shared between the filters.
Thus, instead of recomputing the filter when the wallet creates new addresses, it would create an entirely fresh filter for the next keys.
One disadvantage is that at the moment multiple filters per peer is not supported by the bitcoin wire protocol.
Another issue with Bloom filters is that an attacker could safely assume that the probability is higher for two pubkeys to belong to the same person if they are closer in the transaction graph. As a countermeasure the wallet could deliberately put existing foreign pubkeys that are close into the filter.</p>

<p>I feel sorry for the people whose privacy has been potentially compromised unknowingly by malicious parties and we certainly won&rsquo;t give away the data set but nonetheless it is really exciting what can be found in the data.
If you have suggestions what to look out for and what would be interesting (not necessarily concerning machine learning) feel free to contact me.</p>
]]></content>
  </entry>
  
</feed>
