<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: crypto | nickler's]]></title>
  <link href="https://jonasnick.github.io/blog/categories/crypto/atom.xml" rel="self"/>
  <link href="https://jonasnick.github.io/"/>
  <updated>2020-01-26T14:44:54+00:00</updated>
  <id>https://jonasnick.github.io/</id>
  <author>
    <name><![CDATA[Jonas Nick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[X-only Pubkeys and Insecure MuSig Shortcuts]]></title>
    <link href="https://jonasnick.github.io/blog/2019/11/19/x-only-pubkeys-and-insecure-musig-shortcuts/"/>
    <updated>2019-11-19T13:35:00+00:00</updated>
    <id>https://jonasnick.github.io/blog/2019/11/19/x-only-pubkeys-and-insecure-musig-shortcuts</id>
    <content type="html"><![CDATA[<p>There are two posts I recently contributed to <a href="https://medium.com/blockstream">Blockstream&rsquo;s engineering blog</a> expanding on the talk I gave at <a href="https://www.thelightningconference.com/">The Lightning Conference 2019</a>. Cross-posting them here because they fit the theme of this blog:</p>

<ul>
<li><p><a href="https://medium.com/blockstream/reducing-bitcoin-transaction-sizes-with-x-only-pubkeys-f86476af05d7">Reducing Bitcoin Transaction Sizes with x-only Pubkeys</a></p>

<blockquote><p>This article is about the recent introduction of so-called x-only pubkeys to the Bitcoin Improvement Proposal <a href="https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki">BIP-schnorr</a> [&hellip;] significantly reducing the weight of every transaction output without any loss in security. By removing the Y-coordinate byte from compressed public keys currently used in Bitcoin, public keys end up with a 32-byte representation. We are going to look at how it works, why thatâ€™s useful, and sketch a security proof.</p></blockquote></li>
<li><p><a href="https://medium.com/blockstream/insecure-shortcuts-in-musig-2ad0d38a97da">Insecure Shortcuts in MuSig</a></p>

<blockquote><p>Using BIP-Schnorr-based multisignatures, no matter how many signers are involved, the result is a single public key and a single signature indistinguishable from a regular, single-signer BIP-Schnorr signature. This article is about optimizing implementations of multisignature protocols and why seemingly harmless changes can totally break the security.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secure protocols on BIP-taproot]]></title>
    <link href="https://jonasnick.github.io/blog/2019/06/25/secure-protocols-on-bip-taproot/"/>
    <updated>2019-06-25T22:42:00+00:00</updated>
    <id>https://jonasnick.github.io/blog/2019/06/25/secure-protocols-on-bip-taproot</id>
    <content type="html"><![CDATA[<p><a href="https://youtu.be/DKOG0BQMmmg?t=21866"><img src="https://jonasnick.github.io/images/2019-breaking.png" width="560"></a></p>

<p>At <a href="https://breaking-bitcoin.com/">Breaking Bitcoin</a> 2019 in Amsterdam I gave a talk about how to build secure protocols on BIP-taproot or more specifically how to avoid the dangers we learned about so far.
There was not enough time to cover everything.
The talk also gives an introduction to how to use our <a href="https://github.com/ElementsProject/secp256k1-zkp/blob/secp256k1-zkp/include/secp256k1_musig.h">MuSig implementation in libsecp256k1-zkp</a>.
The video recording is on <a href="https://youtu.be/DKOG0BQMmmg?t=21866">youtube</a> (<a href="/slides/2019-breaking.pdf">slides</a>).
Thanks to <a href="https://twitter.com/kanzure">kanzure</a> there&rsquo;s also a <a href="https://diyhpl.us/wiki/transcripts/breaking-bitcoin/2019/secure-protocols-bip-taproot/">transcript</a> of the talk.</p>

<p><strong>Erratum</strong>: MuSig nonces can not be pre-shared. Only nonce commitments. See <a href="https://github.com/ElementsProject/secp256k1-zkp/pull/73">https://github.com/ElementsProject/secp256k1-zkp/pull/73</a> for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schnorr and Taproot in Lightning]]></title>
    <link href="https://jonasnick.github.io/blog/2018/09/04/schnorr-and-taproot-in-lightning/"/>
    <updated>2018-09-04T13:24:00+00:00</updated>
    <id>https://jonasnick.github.io/blog/2018/09/04/schnorr-and-taproot-in-lightning</id>
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=QrX1SpD6l9g&feature=youtu.be&t=7524"><img src="https://jonasnick.github.io/images/lightninghackday-youtube.png" width="560"></a></p>

<p>Last weekend a bunch of hackers assembled for the 3rd Lightning Netword Hackday in Berlin.
The event was packed with interesting sessions, neat hacks and exciting discussions which were concluded with the traditional dinner &amp; drinks at ROOM77.
I gave a talk about &ldquo;Schnorr and Taproot in Lightning&rdquo; (<a href="/slides/2018-hackday.pdf">slides</a>, <a href="https://www.youtube.com/watch?v=QrX1SpD6l9g&amp;feature=youtu.be&amp;t=7524">video</a>) focusing on privacy and security implications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blind Signatures in Scriptless Scripts]]></title>
    <link href="https://jonasnick.github.io/blog/2018/07/31/blind-signatures-in-scriptless-scripts/"/>
    <updated>2018-07-31T14:53:00+00:00</updated>
    <id>https://jonasnick.github.io/blog/2018/07/31/blind-signatures-in-scriptless-scripts</id>
    <content type="html"><![CDATA[<p><a href="https://youtu.be/XORDEX-RrAI?t=25484"><img src="https://jonasnick.github.io/images/bob-youtube.png" width="560"></a></p>

<p>At the recent Building on Bitcoin conference in Lisbon I gave a talk about a few new ideas in the scriptless scripts framework.
The first part was mainly about <a href="https://github.com/apoelstra/scriptless-scripts/pull/1">blind coinswaps</a>, which is a way to swap bitcoins with a tumbler without revealing which coin are swapped.
The second part about how to exchange ecash tokens peer-to-peer using scriptless scripts and Brands credentials.
You can find the talk <a href="https://youtu.be/XORDEX-RrAI?t=25484">on youtube</a> and the slides <a href="/slides/2018-bob.pdf">here</a>.
Thanks to <a href="https://twitter.com/kanzure">kanzure</a> there&rsquo;s also a <a href="https://diyhpl.us/wiki/transcripts/building-on-bitcoin/2018/blind-signatures-and-scriptless-scripts/">transcript</a> of the talk.</p>

<p>EDIT: I&rsquo;ve added a note about the security of Blind Schnorr signatures against forgery to the <a href="/slides/2018-bob.pdf">slides</a>.
In short, a naive implementation of the scheme is vulnerable to <a href="http://www.enseignement.polytechnique.fr/informatique/profs/Francois.Morain/Master1/Crypto/projects/Wagner02.pdf">Wagner&rsquo;s attack</a>.
An attacker can forge a signature using 65536 parallel signing sessions and <code>O(2^32)</code> work.</p>
]]></content>
  </entry>
  
</feed>
